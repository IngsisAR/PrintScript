[ {
  "token" : "LET",
  "regex" : "let"
}, {
  "token" : "CONST",
  "regex" : "const"
}, {
  "token" : "BOOLEAN",
  "regex" : "true|false"
}, {
  "token" : "IF",
  "regex" : "if"
}, {
  "token" : "ELSE",
  "regex"  : "else"
}, {
  "token" : "COLON",
  "regex" : ":"
}, {
  "token" : "SEMICOLON",
  "regex" : ";"
}, {
  "token" : "COMMA",
  "regex" : ","
}, {
  "token" : "PLUS",
  "regex" : "\\+"
}, {
  "token" : "MINUS",
  "regex" : "-"
}, {
  "token" : "MUL",
  "regex" : "\\*"
}, {
  "token" : "DIV",
  "regex" : "/"
}, {
  "token" : "MODULE",
  "regex" : "%"
}, {
  "token" : "ASSIGN",
  "regex" : "="
}, {
  "token" : "OPAREN",
  "regex" : "\\("
}, {
  "token" : "CPAREN",
  "regex" : "\\)"
}, {
  "token" : "OBRACE",
  "regex" : "\\{"
}, {
  "token" : "CBRACE",
  "regex" : "\\}"
}, {
  "token" : "OBRACKET",
  "regex" : "\\["
}, {
  "token" : "CBRACKET",
  "regex" : "\\]"
}, {
  "token" : "PROGRAM",
  "regex" : "program"
}, {
  "token" : "ID",
  "regex" : "(?!\\b(?:number|string|boolean)\\b)[a-zA-Z_][a-zA-Z0-9_]*"
},{
  "token" : "TYPE",
  "regex" : "number|string|boolean"
}, {
  "token" : "NUMBER",
  "regex" : "\\d+(\\.\\d+)?"
}, {
  "token" : "STRING",
  "regex" : "\"[^\"]*\"|'[^']*'"
}]
